// <auto-generated />
using HADES.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HADES.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210415174945_sqliteMigration")]
    partial class sqliteMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("HADES.Models.AdminGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ADG_id");

                    b.Property<int>("AppConfigId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ADG_ACF_id");

                    b.Property<string>("SamAccount")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ADG_sam_account_name");

                    b.HasKey("Id");

                    b.HasIndex("AppConfigId");

                    b.ToTable("AdminGroup_ADG");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppConfigId = 1,
                            SamAccount = "samAdmin"
                        });
                });

            modelBuilder.Entity("HADES.Models.AppConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ACF_id");

                    b.Property<string>("ActiveDirectory")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ACF_active_directory");

                    b.Property<string>("CompanyBackgroundFile")
                        .HasColumnType("TEXT")
                        .HasColumnName("ACF_company_background_file");

                    b.Property<string>("CompanyLogoFile")
                        .HasColumnType("TEXT")
                        .HasColumnName("ACF_company_logo_file");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT")
                        .HasColumnName("ACF_company_name");

                    b.Property<string>("DefaultLanguage")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ACF_default_language");

                    b.Property<int>("LogDeleteFrequency")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ACF_log_delete_frequency");

                    b.Property<int>("LogMaxFileSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ACF_log_max_file_size");

                    b.Property<string>("SMTP")
                        .HasColumnType("TEXT")
                        .HasColumnName("ACF_SMTP");

                    b.HasKey("Id");

                    b.ToTable("AppConfig_ACF");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveDirectory = "",
                            DefaultLanguage = "fr",
                            LogDeleteFrequency = 30,
                            LogMaxFileSize = 10
                        });
                });

            modelBuilder.Entity("HADES.Models.DefaultUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("DUS_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("DUS_password_hash");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DUS_ROL_id");

                    b.Property<int>("UserConfigId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DUS_UCF_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("DUS_username");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserConfigId")
                        .IsUnique();

                    b.ToTable("DefaultUser_DUS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "password",
                            RoleId = 1,
                            UserConfigId = 1,
                            UserName = "user1"
                        });
                });

            modelBuilder.Entity("HADES.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("EMA_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("EMA_email");

                    b.Property<bool>("ExpirationDate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EMA_expiration_date");

                    b.Property<bool>("GroupCreate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EMA_group_create");

                    b.Property<bool>("GroupDelete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EMA_group_delete");

                    b.Property<bool>("MemberAdd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EMA_member_add");

                    b.Property<bool>("MemberRemoval")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EMA_member_remove");

                    b.Property<int>("UserConfigId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EMA_UCF_id");

                    b.HasKey("Id");

                    b.HasIndex("UserConfigId");

                    b.ToTable("Email_EMA");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "DefaultUser@google.com",
                            ExpirationDate = true,
                            GroupCreate = true,
                            GroupDelete = true,
                            MemberAdd = true,
                            MemberRemoval = true,
                            UserConfigId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "user@google.com",
                            ExpirationDate = true,
                            GroupCreate = true,
                            GroupDelete = true,
                            MemberAdd = true,
                            MemberRemoval = true,
                            UserConfigId = 2
                        });
                });

            modelBuilder.Entity("HADES.Models.OwnerGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("GRP_id");

                    b.Property<string>("SamAccount")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("GRP_sam_account_name");

                    b.HasKey("Id");

                    b.ToTable("OwnerGroup_GRP");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SamAccount = "samOwnerGroup"
                        });
                });

            modelBuilder.Entity("HADES.Models.OwnerGroupUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("GRU_id");

                    b.Property<int>("OwnerGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GRU_GRP_id");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GRU_USE_id");

                    b.HasKey("Id");

                    b.HasIndex("OwnerGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("OwnerGroupUser_GRU");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OwnerGroupId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("HADES.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ROL_id");

                    b.Property<bool>("AdCrudAccess")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ROL_access_ad_crud");

                    b.Property<bool>("AppConfigAccess")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ROL_access_app_config");

                    b.Property<bool>("DefineOwner")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ROL_define_owner");

                    b.Property<bool>("EventLogAccess")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ROL_access_event_log");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ROL_name");

                    b.Property<bool>("UserListAccess")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ROL_access_users_list");

                    b.HasKey("Id");

                    b.ToTable("Role_ROL");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdCrudAccess = true,
                            AppConfigAccess = true,
                            DefineOwner = true,
                            EventLogAccess = true,
                            Name = "role1",
                            UserListAccess = true
                        });
                });

            modelBuilder.Entity("HADES.Models.SuperAdminGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SUG_id");

                    b.Property<int>("AppConfigId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SUG_ACF_id");

                    b.Property<string>("SamAccount")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("SUG_sam_account_name");

                    b.HasKey("Id");

                    b.HasIndex("AppConfigId");

                    b.ToTable("SuperAdminGroup_SUG");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppConfigId = 1,
                            SamAccount = "samSuperAdmin"
                        });
                });

            modelBuilder.Entity("HADES.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("USE_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("USE_ROL_id");

                    b.Property<string>("SamAccount")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("USE_sam_account_name");

                    b.Property<int>("UserConfigId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("USE_UCF_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserConfigId")
                        .IsUnique();

                    b.ToTable("User_USE");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            SamAccount = "user2",
                            UserConfigId = 2
                        });
                });

            modelBuilder.Entity("HADES.Models.UserConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UCF_id");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("UCF_language");

                    b.Property<bool>("Notification")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UCF_notification");

                    b.Property<string>("ThemeFile")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("UCF_theme_file");

                    b.HasKey("Id");

                    b.ToTable("UserConfig_UCF");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language = "fr",
                            Notification = true,
                            ThemeFile = "dark"
                        },
                        new
                        {
                            Id = 2,
                            Language = "fr",
                            Notification = true,
                            ThemeFile = "light"
                        });
                });

            modelBuilder.Entity("HADES.Models.AdminGroup", b =>
                {
                    b.HasOne("HADES.Models.AppConfig", "AppConfig")
                        .WithMany("AdminGroups")
                        .HasForeignKey("AppConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppConfig");
                });

            modelBuilder.Entity("HADES.Models.DefaultUser", b =>
                {
                    b.HasOne("HADES.Models.Role", "Role")
                        .WithMany("DefaultUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HADES.Models.UserConfig", "UserConfig")
                        .WithOne("DefaultUser")
                        .HasForeignKey("HADES.Models.DefaultUser", "UserConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserConfig");
                });

            modelBuilder.Entity("HADES.Models.Email", b =>
                {
                    b.HasOne("HADES.Models.UserConfig", "UserConfig")
                        .WithMany("Emails")
                        .HasForeignKey("UserConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserConfig");
                });

            modelBuilder.Entity("HADES.Models.OwnerGroupUser", b =>
                {
                    b.HasOne("HADES.Models.OwnerGroup", "OwnerGroup")
                        .WithMany("OwnerGroupUsers")
                        .HasForeignKey("OwnerGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HADES.Models.User", "User")
                        .WithMany("OwnerGroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HADES.Models.SuperAdminGroup", b =>
                {
                    b.HasOne("HADES.Models.AppConfig", "AppConfig")
                        .WithMany("SuperAdminGroups")
                        .HasForeignKey("AppConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppConfig");
                });

            modelBuilder.Entity("HADES.Models.User", b =>
                {
                    b.HasOne("HADES.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HADES.Models.UserConfig", "UserConfig")
                        .WithOne("User")
                        .HasForeignKey("HADES.Models.User", "UserConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserConfig");
                });

            modelBuilder.Entity("HADES.Models.AppConfig", b =>
                {
                    b.Navigation("AdminGroups");

                    b.Navigation("SuperAdminGroups");
                });

            modelBuilder.Entity("HADES.Models.OwnerGroup", b =>
                {
                    b.Navigation("OwnerGroupUsers");
                });

            modelBuilder.Entity("HADES.Models.Role", b =>
                {
                    b.Navigation("DefaultUsers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HADES.Models.User", b =>
                {
                    b.Navigation("OwnerGroupUsers");
                });

            modelBuilder.Entity("HADES.Models.UserConfig", b =>
                {
                    b.Navigation("DefaultUser");

                    b.Navigation("Emails");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
